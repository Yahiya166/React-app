{"version":3,"sources":["Images/logo-transparent.png","Components/Header.jsx","Components/Footer.jsx","App.jsx","serviceWorker.js","store/Readucer/authReducer.js","store/Readucer/appReducer.js","store/Readucer/index.js","store/index.js","index.js"],"names":["module","exports","Header","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","Logo","src","LOGOO","alt","width","Footer","App","state","name","email","this","Boolean","window","location","hostname","match","INITIAL_STATE","username","app_name","combineReducers","auth","app","action","console","log","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,8C,sNC8BrCC,E,uKAGA,OACE,yBAAKC,UAAU,yDAEf,kBAAE,EAAF,MAKA,4BAAQA,UAAU,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAC1J,0BAAMN,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BO,GAAG,aAC3C,wBAAIP,UAAU,cACZ,wBAAIA,UAAU,mBAAd,IAAiC,6BAAjC,IAAuC,6CAAvC,IAA6D,0BAAMA,UAAU,WAAhB,qB,GAhBpDQ,aA2BfC,E,uKAEF,OACE,6BACG,yBAAKC,IAAKC,IAAOC,IAAI,MAAMC,MAAM,e,GAJvBL,aCtCJM,E,uKAVP,OACI,yBAAKd,UAAU,UACb,oCAAS,0CAAT,U,GAJOQ,aCoFNO,E,kDAxEX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACXC,KAAM,cACNC,MAAO,+BAJA,E,qDASb,OACE,6BACA,kBAAC,EAAD,MACA,6BACA,gCACF,4CAAkBC,KAAKH,MAAMC,KAA7B,OACA,4CAAkBE,KAAKH,MAAME,MAA7B,MACA,mEAEE,6BACA,6BACA,kBAAC,EAAD,W,GArBYV,a,MCNEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBAC,EAAgB,CAClBC,SAAU,SACVR,MAAO,oB,QCFLO,EAAgB,CAClBE,SAAU,aCGCC,cAAgB,CAC3BC,KFAW,WAA4B,IAA3Bb,EAA0B,uDAAlBS,EAGpB,OACIT,GEHJc,IDFW,WAAmC,IAAlCd,EAAiC,uDAAzBS,EAAcM,EAAW,uCAE7C,OADAC,QAAQC,IAAI,eAAgBF,GACpBA,EAAO9B,MACX,IAAK,UACD,OAAO,YAAC,eACDe,GADP,IAEIW,SAAUI,EAAO9B,OAI7B,OACIe,K,QEPOkB,EAHDC,YAAYC,EAAS,GAAIC,YAAgBC,MCKvDC,IAASC,OAIP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAGFO,SAASC,eAAe,SLiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,c","file":"static/js/main.7206a6b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-transparent.aaa28d6b.png\";","import React, {Component} from 'react';\r\nimport LOGOO from '../Images/logo-transparent.png' ;\r\n\r\n\r\n\r\n\r\n\r\n// class Header extends Component{\r\n//     render(){\r\n//         return(\r\n//             <div className=\"Header\">\r\n//                 <h2> Header Component </h2>\r\n//                 {/* <Logo /> */}\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n// export default class Header extends Component{\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                 <h1> Header Component </h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\nclass Header extends Component{\r\n  render(){\r\n    // console.log(\"props===>\", this.props)\r\n      return(\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light w-100% \">\r\n\r\n        < Logo />\r\n        {/* < Logo /> {this.props.email} */}\r\n        {/* < Logo /> <button className=\"btnn\" onClick={()=> this.props.get_props(this.props.name)}>Send props</button> */}\r\n        {/* < Logo /> <button onClick={()=> this.props.get_props(\"Yahiya\")}>Send props</button> */}\r\n\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item active\"> <br/> <b> MY React App </b> <span className=\"sr-only\">(current)</span></li>\r\n              {/* <a className=\"nav-link\" href=\"#\" ></a> */}\r\n\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      )\r\n  }\r\n}\r\n\r\n\r\nclass Logo extends Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n         <img src={LOGOO} alt=\"Car\" width=\"200px\"/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport {\r\n  Header,\r\n  Logo\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class Header extends Component {\r\n//   render(){\r\n//     return(\r\n//       <div>\r\n//       <h2>{this.props.name}</h2>\r\n//       <h4> RS: {this.props.pricing} </h4>\r\n//       <button onClick={()=> this.props.getData(\"Yahiya\")}> Send Data </button>\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// export default Header;","import React, {Component} from 'react';\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"Footer\">\r\n              <center> <h4>Â© 2020 </h4> </center>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default Footer;","// import React from 'react';\r\nimport React, {Component} from 'react';\r\nimport './App.css';\r\n// import Header from './Components/Header.jsx';\r\nimport { Header} from './Components/Header.jsx';\r\n// import {Header,Logo} from './Components/Header.jsx';\r\nimport Footer from './Components/Footer.jsx'\r\n// import AppRouter from './config/router';\r\n// import Falto from './Components/falto.jsx'\r\n// import BasicTextFields from './Components/input.jsx'\r\n// import Child from './Components/Child';\r\n// import { connect } from 'react-redux';\r\n// import {set_data} from './store/action/index'\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n          name: \"Yahiya Asif\",\r\n          email: \"muhammadyahiya166@gmail.com\"\r\n        }\r\n    }\r\n// \r\n  render(){\r\n    return(\r\n      <div>\r\n      <Header />\r\n      <br/> \r\n      <center>\r\n    <h2>My name is \" {this.state.name} \" </h2>\r\n    <h4>My email is \"{this.state.email}\" </h4>\r\n    <h4>\"I am a developer and freelancer\" </h4>\r\n    </center>\r\n      <br/>\r\n      <br/>\r\n      <Footer />\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// class App extends Component {\r\n  // constructor(){\r\n    // super()\r\n    // this.state = {\r\n      // count : 0,\r\n    // }\r\n  // }\r\n  // render(){\r\n    // console.log(\"Redux_Data=>\",this.props)\r\n    // return(\r\n      // <div style={{textAlign: 'center', marginTop: '200px', marginBottom: '30px'}}>\r\n{/*  */}\r\n      {/* <h1> */}\r\n        // {this.state.count}\r\n      {/* </h1> */}\r\n      // {this.state.count < 5 && <Child count={this.state.count} />}\r\n      {/* <button className=\"btnnn\" onClick={()=> this.setState({count: this.state.count + 1})}> Increament </button> */}\r\n      {/* <button className=\"btnnn\" onClick={()=> this.setState({count: this.state.count - 1})}> decreament </button> */}\r\n      {/* <br/> */}\r\n      {/* <button className=\"btnnn\" onClick={()=> this.props.set_data(\"Hello brothers\")}>Set Data</button> */}\r\n      {/* </div> */}\r\n    // ) \r\n  // }\r\n// }\r\n// const mapStateToProps = (state) => ({\r\n    // username: state.auth.username,\r\n    // email: state.auth.email,\r\n    // app_name: state.app.app_name\r\n// })\r\n// \r\n// \r\n// const mapDispatchToProps = (dispatch) => ({\r\n  // set_data: (data)=> dispatch(set_data(data))\r\n// })\r\n  // \r\n// \r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {\r\n    username: \"Yahiya\",\r\n    email: \"yahiya@gmail.com\"   \r\n}\r\n\r\nexport default (state = INITIAL_STATE) => {\r\n    // export default (state = INITIAL_STATE,action) => {\r\n        // console.log(\"auth_action=>\", action)\r\n    return(\r\n        state\r\n    );\r\n};  ","const INITIAL_STATE = {\r\n    app_name: \"Chatt App\",\r\n}\r\n\r\nexport default (state = INITIAL_STATE,action) => {\r\n    console.log(\"app_action=>\", action)\r\n    switch (action.type) {\r\n        case \"SetData\":\r\n            return ({\r\n                ...state,\r\n                app_name: action.type   \r\n            })\r\n    }\r\n    // export default (state = INITIAL_STATE) => {\r\n    return(\r\n        state\r\n    );\r\n};  ","import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport appReducer from './appReducer';  \r\n\r\nexport default combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer\r\n})","import reducer from './Readucer';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\nconst store = createStore(reducer, {}, applyMiddleware(thunk))\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}